%%% PROBLEME ASP %%%
%Déclaration des types (domain)
%Déclaration des prédicats (domain)
pred(on(X,Y)):-block(X),block(Y).
pred(ontable(X)):-block(X).
pred(clear(X)):-block(X).
pred(handempty).
pred(holding(X)):-block(X).
%Déclaration de l'action pickup
action(pickup(X)):-block(X).
%Préconditions
pre(pickup(X),clear(X)):-action(pickup(X)).
pre(pickup(X),ontable(X)):-action(pickup(X)).
pre(pickup(X),handempty):-action(pickup(X)).
%Effets
del(pickup(X),ontable(X)):-action(pickup(X)).
del(pickup(X),clear(X)):-action(pickup(X)).
del(pickup(X),handempty):-action(pickup(X)).
add(pickup(X),holding(X)):-action(pickup(X)).
%Déclaration de l'action putdown
action(putdown(X)):-block(X).
%Préconditions
pre(putdown(X),holding(X)):-action(putdown(X)).
%Effets
add(putdown(X),ontable(X)):-action(putdown(X)).
add(putdown(X),clear(X)):-action(putdown(X)).
add(putdown(X),handempty):-action(putdown(X)).
del(putdown(X),holding(X)):-action(putdown(X)).
%Déclaration de l'action stack
action(stack(X,Y)):-block(X),block(Y).
%Préconditions
pre(stack(X,Y),clear(Y)):-action(stack(X,Y)).
pre(stack(X,Y),holding(X)):-action(stack(X,Y)).
%Effets
add(stack(X,Y),on(X,Y)):-action(stack(X,Y)).
add(stack(X,Y),clear(X)):-action(stack(X,Y)).
add(stack(X,Y),handempty):-action(stack(X,Y)).
del(stack(X,Y),clear(Y)):-action(stack(X,Y)).
del(stack(X,Y),holding(X)):-action(stack(X,Y)).
%Déclaration de l'action unstack
action(unstack(X,Y)):-block(X),block(Y).
%Préconditions
pre(unstack(X,Y),on(X,Y)):-action(unstack(X,Y)).
pre(unstack(X,Y),clear(X)):-action(unstack(X,Y)).
pre(unstack(X,Y),handempty):-action(unstack(X,Y)).
%Effets
add(unstack(X,Y),holding(X)):-action(unstack(X,Y)).
add(unstack(X,Y),clear(Y)):-action(unstack(X,Y)).
del(unstack(X,Y),on(X,Y)):-action(unstack(X,Y)).
del(unstack(X,Y),clear(X)):-action(unstack(X,Y)).
del(unstack(X,Y),handempty):-action(unstack(X,Y)).
%Déclaration des objets (problem)
block(a;b;c;d).
%Etat initial (problem)
init(clear(b)).
init(ontable(a)).
init(on(b,a)).
init(clear(c)).
init(ontable(d)).
init(on(c,d)).
init(handempty).
%But (problem)
but(on(a,b)).
but(on(b,c)).
but(on(c,d)).
but(clear(a)).
but(ontable(d)).
but(handempty).


%%% PLANIFICATION STRIPS %%%
#const n=4.
time(0..n).

% Etat initial: si quelquechose est initialement vrai, il est vrai au temps 0
holds(P,0) :- init(P).

1 { perform(A,T) : action(A) } 1 :- time(T), T != n.

% Préconditions: une action ne peut se produire que si toutes les conditions sont vérifiées
% Autrement dit, si une action s'effectue alors qu'une condition n'est pas vérifiée, on a contradiction.
:- perform(A,T), not holds(P,T), pre(A,P), action(A), pred(P), time(T).

% Effets positifs: si une action s'effectue au temps T, tous ses effets sont vrais au temps T+1
holds(P,T+1):- perform(A,T), add(A,P), action(A), pred(P), time(T).

% Inertie et effets positifs; ce qui est vrai au temps T est vrai au temps T+1, sauf si une action y a mis fin
% Autrement dit, un prédicat reste vrai sauf si une action effectuée au temps T l'annule.
holds(P,T+1) :- holds(P,T), not del(A,P), perform(A,T), action(A), pred(P), time(T).

% Choix d'action: une seule action est effectuée à chaque pas de temps (sauf le dernier)
:- perform(A1,T), perform(A2,T), action(A1), action(A2), A1 != A2, time(T).

% Spécification du but: le but doit être atteint au temps n.
% Autrement dit: on a contradiction s'il ne l'est pas au temps n.
:- not holds(P,n), but(P), pred(P).

#show perform/2.
